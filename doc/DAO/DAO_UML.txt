@startuml
!theme carbon-gray

title  <color:grey>JavaBeats - DAO Diagram</color>

!true = 1
!false = 0
!showPrivateMethods = true

package DAO{

    interface ISearchDAO{
        + search(field : String, activeProfile : JBProfile) : ArrayList<IJBResearchable>
        + search(field : String, activeProfile : JBProfile, mode : EJBENTITY) : ArrayList<IJBResearchable>
    }
    class SearchDAO implements ISearchDAO{
        !if (showPrivateMethods)
            - searchUsers(field : String) : ArrayList<User>
            - searchArtists(field : String) : ArrayList<Artist>
            - searchSongs(field : String, activeProfile : JBProfile) : ArrayList<Song>
            - searchEpisodes(field : String, activeProfile : JBProfile) : ArrayList<Episode>
            - searchPlaylists(field : String) : ArrayList<Playlist>
            - searchAlbums(field : String) : ArrayList<Album>
            - searchPodcasts(field : String) : ArrayList<Podcast>
        !endif
    }

    package profile{
        interface IProfileDAO{
            + insert(profile : JBProfile) : void
            + remove(profile : JBProfile) : void
            + update(profile : JBProfile) : void
            + get(profile : JBProfile) : JBProfile
            + getArtist(profile : JBProfile) : Artist
            + getUser(profile : JBProfile) : User
        }
        class ProfileDAO implements IProfileDAO{
            !if (showPrivateMethods)
                - getTotalListeningTime(user : User) : double
                - getTotalListeners(artist : Artist) : int
                - getListeningHistory(profile : JBProfile) : ArrayList<JBAudio>
                - updateUsername(profile : JBProfile) : void
                - updatePassword(profile : JBProfile) : void
                - updateName(profile : JBProfile) : void
                - updateSurname(profile : JBProfile) : void
                - updateBiography(profile : JBProfile) : void
                - updateProfilePicture(profile : JBProfile) : void
                - updateVisibility(user : User) : void
            !endif
        }
    }

    package playable{

        interface IAudioDAO{
            + insert(audio : JBAudio): void
            + remove(audio : JBAudio): void
            + get(audio : JBAudio, activeProfile : JBProfile): JBAudio
            + getSong(audio : JBAudio, activeProfile : JBProfile): Song
            + getEpisode(audio : JBAudio, activeProfile : JBProfile): Episode
            + updateIsFavorite(activeProfile : JBProfile): void
            + addToListeningHistory(audio : JBAudio, activeProfile : JBProfile): void
            + selectByPlaylist(playlist : Playlist, activeProfile JBProfile)  : ArrayList<JBAudio>
            + selectByAlbum(album : Album, activeProfile JBProfile) : ArrayList<Song>
            + selectByPodcast(podcast : Podcast, activeProfile JBProfile) : ArrayList<Episode>
            + selectFavorites(activeProfile JBProfile) : ArrayList<JBAudio>
        }

        class AudioDAO implements IAudioDAO{
            !if (showPrivateMethods)
                - getGenres(JBAudio) : String[]
                - getNumberOfStreams(JBAudio) : int
                - isFavorite(JBAudio, JBProfile) : boolean
                - insertAudio(JBAudio) : void
                - linkAudioToArtist(JBAudio) : void
                - linkAudioToCollection(JBAudio) : void
                - linkAudioToGenres(JBAudio) : void
            !endif
        }
    }

    package collection{

        interface ICollectionDAO{
            + insert(collection : JBCollection) : JBCollection
            + remove(collection : JBCollection) : void
            + update(collection : JBCollection) : void
            + get(collection : JBCollection) : JBCollection
            + getPlaylist(collection : JBCollection) : PLaylist
            + getAlbum(collection : JBCollection) : Album
            + getPodcast(collection : JBCollection) : Podcast
            + getFavorites(activeProfile : JBProfile) : Playlist
            + selectPlaylistsByProfile(profile : JBProfile) : ArrayList<JBCollection>
            + selectAlbumsByProfile(profile : JBProfile) : ArrayList<JBCollection>
            + selectPodcastsByProfile(profile : JBProfile) : ArrayList<JBCollection>
        }

        class CollectionDAO implements ICollectionDAO {
            !if (showPrivateMethods)
                - updateName(collection : JBCollection) : void
                - updatePicture(collection : JBCollection) : void
                - updateTrackList(collection : JBCollection) : void
                - insertColection(collection : JBCollection) : void
                - linkCollectionToProfile(collection : JBCollection) : void
                - linkPlaylistToProfile(playlist : Playlist) : void
                - linkAlbumToArtist(album : Album) : void
                - linkPodcastToArtist(podcast : Podcast) : void
                - linkCollectionToAudio(collection : JBCollection) : void
                - linkPlaylistToAudios(playlist : Playlist) : void
                - linkAlbumToSongs(album : Album) : void
                - linkPodcastToEpisode(podcast : Podcast) : void
            !endif
        }
    }



}

hide empty fields
hide empty methods

@enduml